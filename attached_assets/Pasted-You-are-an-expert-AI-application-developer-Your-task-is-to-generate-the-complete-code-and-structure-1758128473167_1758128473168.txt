You are an expert AI application developer. Your task is to generate the complete code and structure for a mobile app called "MarketBytes".

The core concept is to create a stock market news app inspired by Inshorts. It must present live, bite-sized news summaries in a vertical, card-style feed, sorted from latest to oldest.

1. App Concept & Core Functionality
App Name: MarketBytes

Elevator Pitch: A real-time news aggregator that provides concise, 60-word summaries of critical stock market news, helping investors stay informed on the go.

Primary Function: Display a continuous, vertically-scrolling feed of news "cards." The feed must be in reverse chronological order (latest news at the top).

2. Core Features
Feature 1: The Real-Time News Feed
This is the main screen of the app.

It should display news summaries in a card format. Users will swipe up to see the next news item.

Each card must be automatically generated and updated in near real-time as new information becomes available.

Feature 2: AI-Powered News Summarization & Tagging
The backend must continuously scan and aggregate news from multiple reliable financial sources (e.g., Reuters, Bloomberg, MoneyControl, LiveMint APIs).

For each news article, an AI language model must perform two actions:

Summarize: Generate a compelling headline and a neutral, easy-to-read summary of no more than 60 words.

Entity Recognition & Tagging: Automatically identify and tag relevant entities in the news, such as:

Stock Tickers: (e.g., $RELIANCE, $TSLA, $MSFT)

Sectors: (e.g., IT, Pharma, Banking, EVs)

Key Topics: (e.g., Earnings Report, Acquisition, CEO Change, Geopolitics)

These tags must be displayed on the news card.

Feature 3: Interactive News Cards
Each card in the feed must contain:

Headline: Bold and prominent.

Summary: The 60-word AI-generated text.

Image: A relevant image scraped from the source article or a default company logo.

Tags: The clickable tags (tickers, sectors) generated by the AI.

Timestamp: E.g., "5 minutes ago," "1 hour ago."

"Read Full Story" Link: A button or link that opens the original source article in an in-app browser.

Feature 4: Search & Filtering
Implement a search bar at the top.

Users must be able to search for news by typing a company name, stock ticker, or topic (e.g., "Tata Motors" or "$TCS" or "dividends").

The search results page should display all relevant news cards, also sorted from latest to oldest.

3. User Interface (UI) & User Experience (UX)
Theme: Use a clean, professional, and modern design. A dark mode is essential and should be the default.

Layout: A single-column, vertical feed. The experience should be fluid and fast.

Navigation: A simple bottom navigation bar with three icons:

Home: The main news feed.

Search: The search page.

Watchlist (Future Feature): A placeholder for future personalization.

Font: Use a highly readable sans-serif font like Inter or Roboto.

4. Backend Logic & Data Flow
Data Sourcing:

Integrate with a real-time news API service like NewsAPI.org, Finnhub, or Alpaca News API.

Configure the API to fetch articles with keywords like "stock market," "earnings," "NSE," "BSE," "merger," "acquisition," etc.

Processing Pipeline:

A serverless function (e.g., AWS Lambda, Google Cloud Function) should trigger whenever a new article is fetched.

This function sends the article content/URL to a Generative AI model API (like Gemini or OpenAI GPT-4).

The prompt to the AI should be: "Analyze the following financial news article. Extract all relevant stock tickers. Identify the key topics and sectors. Finally, write a neutral, 60-word summary and a compelling headline."

Database:

Use a real-time database like Firebase Firestore or Supabase.

Store the processed news items in a collection called news_feed.

Each document in the collection should have fields for headline, summary, sourceURL, imageURL, timestamp, and an array of tags.

API Delivery:

The mobile app directly subscribes to the news_feed collection in the real-time database.

This ensures that as soon as a new summary is added to the database, it instantly appears at the top of the user's feed without needing a manual refresh. The query should order documents by timestamp in descending order.